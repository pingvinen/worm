<#@ template language="C#" #>
<# var idField = Model.Fields.GetPrimaryKeyField(); #>
using System;
using Worm;
using System.Collections.Generic;

namespace <#= Model.WormNamespace #>
{
	public class <#= Model.WormClassName #> : <#= Model.PocoClassName #>
	{
		<# foreach (PocoField f in Model.Fields.GetPublicFields()) { #>

		[AutoGenerated()]
		private bool hasChanged_<#= f.Name #> = false;
		<# } #>

		<# foreach (PocoField f in Model.Fields.GetPublicFields()) { #>

		[AutoGenerated()]
		public override <#= f.Type #> <#= f.Name #>
		{
			set
			{
				this.hasChanged_<#= f.Name #> = value != base.<#= f.Name #>;
				base.<#= f.Name #> = value;
			}
		}

		<# } #>

		<#
			if (!OutputMethodIfExists("DbIsNew"))
			{
				#>
[AutoGenerated()]
		private bool DbIsNew()
		{
			return base.<#= idField.Name #> == default(<#= idField.Type #>);
		}
				<#
			}
		#>

		<#
			if (!OutputMethodIfExists("DbGetByIdOrDefault"))
			{
				WriteLine("[AutoGenerated()]");
				#>		<#= DbGetByIdOrDefaultTemplate.Render() #><#
				WriteLine(String.Empty);
			}
		#>

		<#
			if (!OutputMethodIfExists("DbSave"))
			{
				#>
[AutoGenerated()]
		public <#= Model.PocoClassName #> DbSave(IWormDbConnection db)
		{
			if (this.DbIsNew())
			{
				return this.DbInsert(db);
			}
			
			return this.DbUpdate(db);
		}
				<#
			}
		#>
		
		<#
			if (!OutputMethodIfExists("DbInsert"))
			{
				WriteLine("[AutoGenerated()]");
				#>		<#= DbInsertTemplate.Render() #><#
				WriteLine(String.Empty);
			}
		#>

		<#
			if (!OutputMethodIfExists("DbUpdate"))
			{
				WriteLine("[AutoGenerated()]");
				#>		<#= DbUpdateTemplate.Render() #><#
				WriteLine(String.Empty);
			}
		#>

		<#
			if (!OutputMethodIfExists("Populate"))
			{
				#>
[AutoGenerated()]
		public void Populate(IWormDataReader dr)
		{
		<# foreach (PocoField f in Model.Fields) { #>
	<#= GetPopulateForField(f) #>
		<# } #>

		<# foreach (PocoField f in Model.Fields.GetPublicFields()) { #>

			this.hasChanged_<#= f.Name #> = false;
<# } #>
		}
				<#
				WriteLine(String.Empty);
			}
		#>
	}
}